/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* global getAssetRegistry */

/**
/**
 * @param {org.example.empty.stu_Select_course} stu_Select_course
 * @transaction
 */

async function stu_Select_course(selectCourse) {   // eslint-disable-line no-unused-vars
    var factory = getFactory();
    var NS = 'org.example.empty';
    var student=selectCourse.student;
    var course=selectCourse.course_list;
    student.course_list.push(course.course_id);
    const participant_stu = await getParticipantRegistry('org.example.empty.Student');
    await participant_stu.update(student);
    const asset_course = await getAssetRegistry('org.example.empty.Course');
    course.student_id.push(student.student_id);
    await asset_course.update(course);
}
 /**
 * @param {org.example.empty.cc_Add_course} cc_Add_course
 * @transaction
 */

async function cc_Add_course(addCourse){
    var NS = 'org.example.empty';
    var course = addCourse.course;
    var course_center = addCourse.course_center;
    var factory = getFactory();
    var course_id = addCourse.course_id;
    const new_course = factory.newResource(NS,'Course',course_id);
    new_course.course_id = addCourse.course_id;
    new_course.course_name = addCourse.course_name;
    new_course.time_count = addCourse.time_count;
    new_course.course_date = addCourse.course_date;
    new_course.course_time = addCourse.course_time;
    new_course.status = addCourse.status;
    new_course.teachers = addCourse.teachers;
    new_course.accept = addCourse.accept;
    new_course.credit = addCourse.credit;
    new_course.introduce = addCourse.introduce;
    new_course.max_student = addCourse.max_student;
    new_course.score = 0;
    new_course.unit_course = [];
    new_course.current_student = addCourse.current_student;
    const course_registry = await getAssetRegistry(new_course.getFullyQualifiedType());
    await course_registry.add(new_course);
}
