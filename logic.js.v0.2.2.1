/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* global getAssetRegistry */

/**
/**
 * @param {org.example.empty.stu_Select_course} stu_Select_course
 * @transaction
 */

async function stu_Select_course(selectCourse) {   // eslint-disable-line no-unused-vars
    var factory = getFactory();
    var NS = 'org.example.empty';
    var student=selectCourse.student;
    var course=selectCourse.course_list;
    var unit_course = course.unit_course;
    var unit_course_id = selectCourse.course_id;
    // 大課程人數+1  
    course.current_student++;
    // 小課程人數+1 &  加入學生id
    for(var i = 0 ; i < unit_course.length ; i++){
       if( course.unit_course[i].course_id ===  unit_course_id){
            course.unit_course[i].current_student++;
 //           course.unit_course[i].students.push(student);
        }
    }
    //
    // 學生那邊放入課程id
    student.course_list.push(unit_course_id);
    const participant_stu = await getParticipantRegistry('org.example.empty.Student');
    await participant_stu.update(student);
    const asset_course = await getAssetRegistry('org.example.empty.Course');
    course.student.push(student);
    await asset_course.update(course);
}
 /**
 * @param {org.example.empty.cc_Add_course} cc_Add_course
 * @transaction
 */

async function cc_Add_course(addCourse){
    var NS = 'org.example.empty';
    var course = addCourse.course;
    var course_center = addCourse.course_center;
    var factory = getFactory();
    var course_id = addCourse.course_id;
    const new_course = factory.newResource(NS,'Course',course_id);
    new_course.course_id = addCourse.course_id;
    new_course.course_name = addCourse.course_name;
    new_course.time_count = addCourse.time_count;
    new_course.course_date = addCourse.course_date;
    new_course.course_time = addCourse.course_time;
    new_course.status = addCourse.status;
    new_course.teachers = addCourse.teachers;
    new_course.accepts = addCourse.accepts;
    new_course.credit = addCourse.credit;
    new_course.introduce = addCourse.introduce;
    new_course.max_student = addCourse.max_student;
    new_course.score = 0;
    new_course.current_student=0;
    new_course.unit_course = [];
    new_course.current_student = addCourse.current_student;
    new_course.student=[];
    const course_registry = await getAssetRegistry(new_course.getFullyQualifiedType());
    await course_registry.add(new_course);
}

/**
 * @param {org.example.empty.stu_delete_unit} stu_delete_unit
 * @transaction
 */
async function stu_delete_unit(stu_delete_unit){
    var delete_unit = stu_delete_unit.unit_id;
    var student_id = stu_delete_unit.student_id;
    var student = stu_delete_unit.student;
    var course_list = stu_delete_unit.course_list;
    for(var i=0;i<delete_unit.length;i++){
        var item = delete_unit[i];
        //刪除學生中的unit id
        for(var j=0;j<student.course_list.length;j++){
            if(item === student.course_list[j]){
                delete student.course_list[j];
            }
        }
        //
        //刪除課程中的student id
        for(var j=0;j<course_list.unit_course.length;j++){
            var unit_id = course_list.unit_course[j].course_id;
            if(unit_id === item){
                for(var k=0;k<course_list.unit_course[j].student.length;k++){
                    if(student_id === course_list.unit_course[j].student[k].student_id){
                        delete course_list.unit_course[j].student[k];
                    }
                }
            }
        }
        //
    }
    const asset_course = await getAssetRegistry('org.example.empty.Course');
    await asset_course.update(course_list);
 //   const participant_stu = await getParticipantRegistry('org.example.empty.Student');
//    await participant_stu.update(student);
}

/**
 * @param {org.example.empty.cc_Add_unit_course} cc_Add_unit_course
 * @transaction
 */
async function cc_Add_unit_course(add_unit_course){
    var course = add_unit_course.course;
    var NS = 'org.example.empty';
  	var factory = getFactory();
    var course_id = add_unit_course.course_id;
    const new_course = factory.newResource(NS,'Course',course_id);
    new_course.course_id = add_unit_course.course_id;
    new_course.course_name = add_unit_course.course_name;
    new_course.time_count = add_unit_course.time_count;
    new_course.course_date = add_unit_course.course_date;
    new_course.course_time = add_unit_course.course_time;
    new_course.status = add_unit_course.status;
    new_course.teachers = add_unit_course.teachers;
    new_course.accepts = add_unit_course.accepts;
    new_course.credit = add_unit_course.credit;
    new_course.introduce = add_unit_course.introduce;
    new_course.max_student = add_unit_course.max_student;
    new_course.score = 0;
    new_course.current_student=0;
    new_course.unit_course = [];
    new_course.current_student = add_unit_course.current_student;
    new_course.student=[];
    course.unit_course.push(new_course);
    const asset_course = await getAssetRegistry('org.example.empty.Course');
    await asset_course.update(course);
}
/**
 * @param {org.example.empty.tr_Modify_score} tr_Modify_score
 * @transaction
 */
async function tr_Modify_score(modify_score){
    var teacher = input_score.teacher;
    var student = input_score.student;
    var course = input_score.course;

    // var student_id = input_score.student.getIdentifier();
    for(var i = 0 ; i < teacher.teach.length ; i++){
        if(modify_score.unit_course_id === teacher.teach[i].course_id){ //老師要修改的unit，檢查是否老師有教這個課程
            for(var j = 0 ; j < course.student.length ; j++){
                if(modify_score.student_id === course.student[j].student_id){ //看
                    course.student[j].unit_score = modify_score.score;
                }
            }        
        
        }
    }
    const asset_course = await getAssetRegistry('org.example.empty.Course');
    await asset_course.update(course);
}
